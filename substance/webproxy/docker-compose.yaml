version: "3.7"

# Common environment values
x-environment: &default-env
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID

# Common keys
x-common-keys: &default-keys
  networks:
    - web-proxy
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped


services:
  traefik:
    << : *default-keys
    image: traefik
    container_name: traefik
    command:
      # Logging
      - --log=true
      - --log.level=DEBUG
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100
      - --accessLog.filters.statusCodes=400-499
      # Docker connectivity
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=web-proxy
      # Entrypoints - 80,443
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Enable dashboard
      - --api=true
      - --api.dashboard=true
      # Let's Encrypt certificate resolver
      - --certificatesresolvers.letsencrypt-do.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt-do.acme.dnschallenge.provider=digitalocean
      - --certificatesresolvers.letsencrypt-do.acme.dnschallenge.delaybeforecheck=0
      - --certificatesresolvers.letsencrypt-do.acme.email=${EMAIL}
      - --certificatesresolvers.letsencrypt-do.acme.storage=/letsencrypt/acme.json
      - no-new-privileges:true
    ports:
      - "80:80"
      - "443:443"
    environment:
      << : *default-env
      DO_AUTH_TOKEN: $DO_AUTH_TOKEN
    labels:
      - traefik.enable=true
      # HTTP-to-HTTPS Redirect
      - traefik.http.routers.http-catchall.entrypoints=web
      - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      # Traefik Dashboard
      - traefik.http.routers.traefik-secure.rule=Host(`traefik.${DOMAINNAME}`)
      - traefik.http.routers.traefik-secure.entrypoints=websecure
      - traefik.http.routers.traefik-secure.tls=true
      - traefik.http.routers.traefik-secure.tls.certresolver=letsencrypt-do
      #- traefik.http.routers.traefik-secure.tls.domains[0].main=${DOMAINNAME}
      #- traefik.http.routers.traefik-secure.tls.domains[0].sans=*.${DOMAINNAME}
      ## Services - API
      - traefik.http.routers.traefik-secure.service=api@internal
      - traefik.http.routers.traefik-secure.middlewares=traefik-auth
      - traefik.http.middlewares.traefik-auth.basicauth.users=${BASIC_AUTH}
      - traefik.http.middlewares.internal-ips.ipwhitelist.sourcerange=192.168.9.0/24
    volumes:
      # - ${DATA}/traefik/traefik.toml:/traefik.toml
      # - ${DATA}/traefik/traefik_dynamic.toml:/traefik_dynamic.toml
      # - ${DATA}/traefik/rules:/rules
      - $DOCKER_DIR/traefik/traefik.log:/traefik.log 
      - $DOCKER_DIR/letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $TZ_MOUNT

  whoami:
    image: traefik/whoami
    container_name: whoami
    labels:
      - traefik.enable=true
      - traefik.http.routers.whoami.rule=Host(`whoami.${DOMAINNAME}`)
      - traefik.http.routers.whoami.entrypoints=websecure
      - traefik.http.routers.whoami.tls=true
      - traefik.http.routers.whoami.tls.certresolver=letsencrypt-do

  nginx-demo:
    image: nginx
    container_name: nginx-demo
    #volumes:
    #  - ./src:/usr/share/nginx/html
    labels:
      - traefik.enable=true
      - traefik.http.routers.web-demo.rule=Host(`web.${DOMAINNAME}`)
      - traefik.http.routers.web-demo.entrypoints=websecure
      - traefik.http.routers.web-demo.tls=true
      - traefik.http.routers.web-demo.tls.certresolver=letsencrypt-do


networks:
  web-proxy:
    external: true

